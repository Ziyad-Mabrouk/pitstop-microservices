apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
  namespace: garage
data:
  enabled_plugins: |
    [rabbitmq_peer_discovery_k8s, rabbitmq_management, rabbitmq_prometheus].
  rabbitmq.conf: |
    cluster_formation.peer_discovery_backend = k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.k8s.address_type = hostname
    cluster_formation.k8s.service_name = rabbitmq-service
    queue_master_locator = min-masters
    loopback_users = none
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq
  namespace: garage
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rabbitmq
  namespace: garage
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rabbitmq
  namespace: garage
subjects:
- kind: ServiceAccount
  name: rabbitmq
  namespace: garage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rabbitmq
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq-statefulset
  namespace: garage
spec:
  selector:
    matchLabels:
      app: rabbitmq
  serviceName: rabbitmq-service 
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-data
      namespace: garage
    spec:
      storageClassName: standard
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "1Gi"
  template:
    metadata:
      name: rabbitmq
      namespace: garage
      labels:
        app: rabbitmq
    spec:
      initContainers:
      - name: "rabbitmq-config"
        image: busybox:1.32.0
        volumeMounts:
        - name: rabbitmq-config
          mountPath: /tmp/rabbitmq
        - name: rabbitmq-config-rw
          mountPath: /etc/rabbitmq
        command:
        - sh
        - -c
        - cp /tmp/rabbitmq/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf && echo '' >> /etc/rabbitmq/rabbitmq.conf;
          cp /tmp/rabbitmq/enabled_plugins /etc/rabbitmq/enabled_plugins
        - invoke-rc.d rabbitmq-server start
      volumes:
      - name: rabbitmq-config
        configMap:
          name: rabbitmq-config
          optional: false
          items:
          - key: enabled_plugins
            path: "enabled_plugins"
          - key: rabbitmq.conf
            path: "rabbitmq.conf"
      - name: rabbitmq-config-rw
        emptyDir: {}
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: rabbitmq-data
      serviceAccount: rabbitmq
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
      containers:
      - name: rabbitmq
        image: rabbitmq:3.8-management
        volumeMounts:
        - name: rabbitmq-config-rw
          mountPath: "/etc/rabbitmq"
        - name: rabbitmq-data
          mountPath: "/var/lib/rabbitmq/mnesia"
        ports:
        - name: amqp
          containerPort: 5672
          protocol: TCP
        - name: management
          containerPort: 15672
          protocol: TCP
        - name: prometheus
          containerPort: 15692
          protocol: TCP
        - name: epmd
          containerPort: 4369
          protocol: TCP
        livenessProbe:
          exec:
            command: ["rabbitmq-diagnostics", "status"]
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 15
        readinessProbe:
          exec:
            command: ["rabbitmq-diagnostics", "ping"]
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: garage
spec:
  ports:
  - name: amqp
    port: 5672
    protocol: TCP
  - name: management
    port: 15672
    protocol: TCP
  selector:
    app: rabbitmq
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-management
  namespace: garage
spec:
  type: NodePort
  ports:
  - port: 15672
    targetPort: 15672
    nodePort: 31672
    protocol: TCP
  selector:
    app: rabbitmq
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
  namespace: garage
data:
  init.sql: |
    CREATE DATABASE dev_db;
    CREATE USER dev_user IDENTIFIED BY 'dev1234567890';
    GRANT ALL PRIVILEGES ON dev_db.* TO dev_user;
    CREATE DATABASE test_db;
    CREATE USER test_user IDENTIFIED BY 'test1234567890';
    GRANT ALL PRIVILEGES ON test_db.* TO test_user;
    CREATE DATABASE prod_db;
    CREATE USER prod_user IDENTIFIED BY 'prod1234567890';
    GRANT ALL PRIVILEGES ON prod_db.* TO prod_user;
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: garage
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cGFzc3dvcmQ=
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: customer-database-statefulset
  namespace: garage
spec:
  serviceName: customer-database-service
  replicas: 1
  selector:
    matchLabels:
      app: customer-database
  template:
    metadata:
      labels:
        app: customer-database
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: customer-database
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        - name: customer-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
  volumeClaimTemplates:
  - metadata:
      name: customer-persistent-storage
      namespace: garage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: customer-database-service
  namespace: garage
spec:
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
  selector:
    app: customer-database
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vehicle-database-statefulset
  namespace: garage
spec:
  serviceName: vehicle-database-service
  replicas: 1
  selector:
    matchLabels:
      app: vehicle-database
  template:
    metadata:
      labels:
        app: vehicle-database
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: vehicle-database
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        - name: vehicle-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
  volumeClaimTemplates:
  - metadata:
      name: vehicle-persistent-storage
      namespace: garage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: vehicle-database-service
  namespace: garage
spec:
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
  selector:
    app: vehicle-database
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: workshop-database-statefulset
  namespace: garage
spec:
  serviceName: workshop-database-service
  replicas: 1
  selector:
    matchLabels:
      app: workshop-database
  template:
    metadata:
      labels:
        app: workshop-database
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: workshop-database
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        - name: workshop-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
  volumeClaimTemplates:
  - metadata:
      name: workshop-persistent-storage
      namespace: garage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: workshop-database-service
  namespace: garage
spec:
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
  selector:
    app: workshop-database
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-config
  namespace: garage
data:
  DB_USER: dev_user
  DB_PASSWORD: dev1234567890
  DB_NAME: dev_db
  CI_DB_USERNAME: test_user
  CI_DB_PASSWORD: test1234567890
  CI_DB_NAME: test_db
  PROD_DB_USERNAME: prod_user
  PROD_DB_PASSWORD: prod1234567890
  PROD_DB_NAME: prod_db
  PROD_DB_PORT: "3306"
  MESSAGE_BUS_USERNAME: guest
  MESSAGE_BUS_PASSWORD: guest
  MESSAGE_BUS: rabbitmq-service
  MESSAGE_BUS_TIMEOUT: "5000"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-deployment
  namespace: garage
  labels:
    app: customer-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer
  template:
    metadata:
      labels:
        app: customer
    spec:
      containers:
      - name: pitstop-customer-service
        image: ziyadmabrouk/pitstop-customer:for-prom
        ports:
        - containerPort: 3001
        envFrom:
        - configMapRef:
            name: service-config
        env:
        - name: DB_HOST
          value: customer-database-service
        - name: PROD_DB_HOSTNAME
          value: customer-database-service
        - name: PORT
          value: "3001"
        - name: SERVICE_NAME
          value: PitstopCustomerService
---
apiVersion: v1
kind: Service
metadata:
  name: pitstop-customer-service
  namespace: garage
spec:
  selector:
    app: customer
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vehicle-deployment
  namespace: garage
  labels:
    app: vehicle-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vehicle
  template:
    metadata:
      labels:
        app: vehicle
    spec:
      containers:
      - name: pitstop-vehicle-service
        image: ziyadmabrouk/pitstop-vehicle:latest
        ports:
        - containerPort: 3002
        envFrom:
        - configMapRef:
            name: service-config
        env:
        - name: DB_HOST
          value: vehicle-database-service
        - name: PROD_DB_HOSTNAME
          value: vehicle-database-service
        - name: PORT
          value: "3002"
        - name: SERVICE_NAME
          value: PitstopVehicleService
---
apiVersion: v1
kind: Service
metadata:
  name: pitstop-vehicle-service
  namespace: garage
spec:
  selector:
    app: vehicle
  ports:
    - protocol: TCP
      port: 3002
      targetPort: 3002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workshop-deployment
  namespace: garage
  labels:
    app: workshop-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: workshop
  template:
    metadata:
      labels:
        app: workshop
    spec:
      containers:
      - name: pitstop-workshop-service
        image: ziyadmabrouk/pitstop-workshop-planning:latest
        ports:
        - containerPort: 3003
        envFrom:
        - configMapRef:
            name: service-config
        env:
        - name: DB_HOST
          value: workshop-database-service
        - name: PROD_DB_HOSTNAME
          value: workshop-database-service
        - name: PORT
          value: "3003"
        - name: SERVICE_NAME
          value: PitstopWorkshopService
---
apiVersion: v1
kind: Service
metadata:
  name: pitstop-workshop-service
  namespace: garage
spec:
  selector:
    app: workshop
  ports:
    - protocol: TCP
      port: 3003
      targetPort: 3003
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment
  namespace: garage
  labels:
    app: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: pitstop-express-gateway
        image: ziyadmabrouk/pitstop-express-gateway:1.0.0
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
  namespace: garage
spec:
  selector:
    app: gateway
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  namespace: garage
  labels:
    app: webapp-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: pitstop-webapp
        image: ziyadmabrouk/pitstop-webapp:1.0.0
        ports:
        - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-service
  namespace: garage
spec:
  selector:
    app: webapp
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081